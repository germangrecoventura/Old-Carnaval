[gd_scene load_steps=7 format=2]

[ext_resource path="res://script/KinematicBody2D.gd" type="Script" id=1]
[ext_resource path="res://assets/storm cloud/Cloud.png" type="Texture" id=2]
[ext_resource path="res://assets/storm cloud/Ray.png" type="Texture" id=3]

[sub_resource type="RectangleShape2D" id=1]
extents = Vector2( 157.5, 95.5 )

[sub_resource type="Shader" id=2]
code = "shader_type canvas_item;

uniform float max_line_width = 10.0;
uniform float min_line_width = 5.0;
uniform float freq = 1.0;
uniform float block_size = 20.0;
uniform vec4 outline_colour = vec4(0,0,0,1);

const float pi = 3.1415;
const int ang_res = 16;


float hash(vec2 p, float s) {
	return fract(35.1 * sin(dot(vec3(112.3, 459.2, 753.2), vec3(p, s))));
}

float noise(vec2 p, float s) {
	vec2 d = vec2(0, 1);
	vec2 b = floor(p);
	vec2 f = fract(p);
	return mix(
		mix(hash(b + d.xx, s), hash(b + d.yx, s), f.x),
		mix(hash(b + d.xy, s), hash(b + d.yy, s), f.x), f.y);
}

float get_line_width(vec2 p, float s) {
	p /= block_size;
	float w = 0.0;
	float intensity = 1.0;
	for (int i = 0; i < 3; i++) {
		w = mix(w, noise(p, s), intensity);
		p /= 2.0;
		intensity /= 2.0;
	}
	
	return mix(max_line_width, min_line_width, w);
}

void fragment() {

	float alpha = 0.0;
	float timeStep = floor(TIME * freq);
	vec2 scale = TEXTURE_PIXEL_SIZE;
	scale *= get_line_width(UV / TEXTURE_PIXEL_SIZE, timeStep);
	for (int i = 0; i < ang_res; i++) {
		float angle = 2.0 * pi * float(i) / float(ang_res);
		vec2 disp = scale * vec2(cos(angle), sin(angle));
		alpha += texture(TEXTURE, UV + disp).a;
	}
	
	if ((alpha > 0.0) && (texture(TEXTURE, UV).a < 0.1)) {
		COLOR = outline_colour;
	}
	else {
		COLOR = texture(TEXTURE, UV);
	}
}"

[sub_resource type="ShaderMaterial" id=3]
shader = SubResource( 2 )
shader_param/max_line_width = 10.0
shader_param/min_line_width = -4.0
shader_param/freq = 6.0
shader_param/block_size = 20.0
shader_param/outline_colour = Plane( 19, 4, 2, 1 )

[node name="KinematicBody2D" type="KinematicBody2D"]
position = Vector2( 512, 300 )
script = ExtResource( 1 )

[node name="Body" type="Sprite" parent="."]
scale = Vector2( 0.6, 0.6 )
texture = ExtResource( 2 )

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
position = Vector2( -0.5, 0.5 )
z_as_relative = false
shape = SubResource( 1 )

[node name="Ray" type="Sprite" parent="."]
visible = false
material = SubResource( 3 )
position = Vector2( 48, 48 )
scale = Vector2( 0.817949, 0.57947 )
texture = ExtResource( 3 )
